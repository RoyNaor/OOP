# Library Management System

## Project Description
The **Library Management System** is a Python-based application designed to manage a library's inventory, users, and loan operations efficiently. It supports features such as adding books, user registration, lending, and returning books, as well as generating reports on popular books and managing user notifications.

---

## Instructions to Run the Project

### Prerequisites
1. **Python Installation**:
   - Ensure that Python 3.6 or higher is installed on your system.

2. **Install Required Dependencies**:
   - Run the following command to install all dependencies:

     ```bash
     pip install -r requirements.txt
     ```

### Running the Project
1. Navigate to the project's root directory.

2. Execute the main script:

   ```bash
   python main.py
   ```

---

## Features

### Book Management
- Add new books to the library's inventory.
- Update and remove books from the system.
- Search books by title, author, or genre.

### User Management
- Register new users.
- Allow existing users to log in and access library features.

### Lending System
- Lend books to registered users.
- Maintain a waiting list for books currently on loan.
- Notify users when books become available.

### Returning System
- Return borrowed books and update inventory.
- Automatically notify users in the waiting list for the returned book.

### Reports and Analytics
- Display popular books based on loan and request counts.
- Generate insights on library usage.

---

## Design Patterns Implemented

### 1. Singleton
- **Usage**: Implemented in the Notification System to ensure a single instance manages all notifications across the application.

### 2. Factory
- **Usage**: Used in the BookFactory class to encapsulate the logic for creating `Book` objects, ensuring consistency and separation of concerns.

### 3. Observer
- **Usage**: Utilized in the Notification System to manage user subscriptions and notifications effectively. Users (observers) are notified of changes in the system, such as book availability.

---

## Files and Structure
- **`main.py`**: Entry point of the application.
- **`helpers/`**: Contains utility functions and file handling logic.
- **`design/`**: Includes classes implementing design patterns like Observer and Singleton.
- **`buttons/`**: Contains the UI logic for various actions like adding books, searching, and more.
- **`files/`**: Directory for CSV files managing books, users, and logs.

---

## Future Enhancements
- Add support for e-book management.
- Implement advanced analytics for user engagement.
- Develop a web interface for remote library access.

---

## Contact
For more details, feel free to contact:
- **Author**: Ofek Bar Shalom
- **GitHub Repository**: [Python Library Project](https://github.com/ofekbarshalom/Python/tree/main/Library/Library22)

---

Enjoy exploring the **Library Management System**!

